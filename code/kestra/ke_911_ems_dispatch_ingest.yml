id: 911_ems_dispatch_ingest
namespace: zoomcamp_capstone

description: |
  Ingests EMS dispatch data for a specified year into PostgreSQL if it doesn't already exist.

inputs:
  - id: year
    type: INT
    displayName: Year
    defaults: 2015

variables:
  file: "911_ems_dispatches_{{inputs.year}}.csv"
  staging_table: "public.ems_dispatch_staging"
  table: "public.ems_dispatch"
  data: "{{outputs.extract.outputFiles['911_ems_dispatches_' ~ inputs.year ~ '.csv']}}"

tasks:
  - id: extract
    type: io.kestra.plugin.scripts.shell.Commands
    outputFiles:
      - "*.csv"
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    commands:
      - wget -qO- https://example.com/data/{{render(vars.file)}}.gz | gunzip > {{render(vars.file)}}

  - id: create_table
    type: io.kestra.plugin.jdbc.postgresql.Queries
    sql: |
      CREATE TABLE IF NOT EXISTS {{render(vars.table)}} (
          unique_row_id      text PRIMARY KEY,
          filename           text,
          incident_number    text,
          call_date          date,
          call_time          time,
          priority           text,
          unit_id            text,
          station            text,
          call_type          text,
          location           text,
          latitude           double precision,
          longitude          double precision
      );

  - id: create_staging_table
    type: io.kestra.plugin.jdbc.postgresql.Queries
    sql: |
      CREATE TABLE IF NOT EXISTS {{render(vars.staging_table)}} (
          unique_row_id      text,
          filename           text,
          incident_number    text,
          call_date          date,
          call_time          time,
          priority           text,
          unit_id            text,
          station            text,
          call_type          text,
          location           text,
          latitude           double precision,
          longitude          double precision
      );

  - id: truncate_staging_table
    type: io.kestra.plugin.jdbc.postgresql.Queries
    sql: |
      TRUNCATE TABLE {{render(vars.staging_table)}};

  - id: copy_in_to_staging_table
    type: io.kestra.plugin.jdbc.postgresql.CopyIn
    format: CSV
    from: "{{render(vars.data)}}"
    table: "{{render(vars.staging_table)}}"
    header: true
    columns: [incident_number,call_date,call_time,priority,unit_id,station,call_type,location,latitude,longitude]

  - id: add_unique_id_and_filename
    type: io.kestra.plugin.jdbc.postgresql.Queries
    sql: |
      UPDATE {{render(vars.staging_table)}}
      SET 
        unique_row_id = md5(
          COALESCE(CAST(incident_number AS text), '') ||
          COALESCE(CAST(call_date AS text), '') || 
          COALESCE(CAST(call_time AS text), '') || 
          COALESCE(unit_id, '') || 
          COALESCE(CAST(latitude AS text), '') || 
          COALESCE(CAST(longitude AS text), '')      
        ),
        filename = '{{render(vars.file)}}';

  - id: merge_data
    type: io.kestra.plugin.jdbc.postgresql.Queries
    sql: |
      MERGE INTO {{render(vars.table)}} AS T
      USING {{render(vars.staging_table)}} AS S
      ON T.unique_row_id = S.unique_row_id
      WHEN NOT MATCHED THEN
        INSERT (
          unique_row_id, filename, incident_number, call_date, call_time, priority, unit_id,
          station, call_type, location, latitude, longitude
        )
        VALUES (
          S.unique_row_id, S.filename, S.incident_number, S.call_date, S.call_time, S.priority, S.unit_id,
          S.station, S.call_type, S.location, S.latitude, S.longitude
        );

  - id: purge_files
    type: io.kestra.plugin.core.storage.PurgeCurrentExecutionFiles
    description: Clean up files after execution.

pluginDefaults:
  - type: io.kestra.plugin.jdbc.postgresql
    values:
      url: jdbc:postgresql://host.docker.internal:5432/postgres-zoomcamp
      username: kestra
      password: k3str4
